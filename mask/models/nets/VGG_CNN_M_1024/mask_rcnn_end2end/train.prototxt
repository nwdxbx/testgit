name: "VGG_CNN_M_1024"
layer {
  name: 'input-data'
  type: 'Python'
  top: 'data'
  top: 'im_info'
  top: 'gt_boxes'
  top: 'gt_masks'
  python_param {
    module: 'roi_data_layer.layer'
    layer: 'RoIDataLayer'
    param_str: "'num_classes': 81"
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 7
    stride: 2
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "conv1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0005
    beta: 0.75
    k: 2
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "norm1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 5
    stride: 2
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "conv2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0005
    beta: 0.75
    k: 2
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "norm2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}

#========= RPN ============

layer {
  name: "rpn_conv/3x3"
  type: "Convolution"
  bottom: "conv5"
  top: "rpn/output"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 256
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_relu/3x3"
  type: "ReLU"
  bottom: "rpn/output"
  top: "rpn/output"
}
layer {
  name: "rpn_cls_score"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_cls_score"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 24   # 2(bg/fg) * 12(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "rpn_bbox_pred"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_bbox_pred"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 48   # 4 * 12(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
   bottom: "rpn_cls_score"
   top: "rpn_cls_score_reshape"
   name: "rpn_cls_score_reshape"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } }
}

layer {
  name: 'rpn-data'
  type: 'Python'
  bottom: 'rpn_cls_score'
  bottom: 'gt_boxes'
  bottom: 'im_info'
  bottom: 'data'
  top: 'rpn_labels'
  top: 'rpn_bbox_targets'
  top: 'rpn_bbox_inside_weights'
  top: 'rpn_bbox_outside_weights'
  python_param {
    module: 'rpn.anchor_target_layer'
    layer: 'AnchorTargetLayer'
    param_str: "'feat_stride': 16 \n'scales': !!python/tuple [4, 8, 16, 32]"
  }
}


layer {
  name: "rpn_loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "rpn_cls_score_reshape"
  bottom: "rpn_labels"
  propagate_down: 1
  propagate_down: 0
  top: "rpn_cls_loss"
  loss_weight: 1
  loss_param {
    ignore_label: -1
    normalize: true
  }
}

layer {
  name: "rpn_loss_bbox"
  type: "SmoothL1Loss"
  bottom: "rpn_bbox_pred"
  bottom: "rpn_bbox_targets"
  bottom: 'rpn_bbox_inside_weights'
  bottom: 'rpn_bbox_outside_weights'
  top: "rpn_loss_bbox"
  loss_weight: 1
  smooth_l1_loss_param { sigma: 3.0 }
}

#========= RoI Proposal ============

layer {
  name: "rpn_cls_prob"
  type: "Softmax"
  bottom: "rpn_cls_score_reshape"
  top: "rpn_cls_prob"
}

layer {
  name: 'rpn_cls_prob_reshape'
  type: 'Reshape'
  bottom: 'rpn_cls_prob'
  top: 'rpn_cls_prob_reshape'
  reshape_param { shape { dim: 0 dim: 24 dim: -1 dim: 0 } }
}

layer {
  name: 'proposal'
  type: 'Python'
  bottom: 'rpn_cls_prob_reshape'
  bottom: 'rpn_bbox_pred'
  bottom: 'im_info'
  top: 'rpn_rois'
  python_param {
    module: 'rpn.proposal_layer'
    layer: 'ProposalLayer'
    param_str: "'feat_stride': 16 \n'scales': !!python/tuple [4, 8, 16, 32]"
  }
}

#layer {
#  name: 'roi-data'
#  type: 'Python'
#  bottom: 'rpn_rois'
#  bottom: 'gt_boxes'
#  top: 'rois'
#  top: 'labels'
#  top: 'bbox_targets'
#  top: 'bbox_inside_weights'
#  top: 'bbox_outside_weights'
#  python_param {
#    module: 'rpn.proposal_target_layer'
#    layer: 'ProposalTargetLayer'
#    param_str: "'num_classes': 81"
#  }
#}



layer {
  name: 'roi-data'
  type: 'Python'
  bottom: 'rpn_rois'
  bottom: 'gt_boxes'
  bottom: 'gt_masks'
  top: 'rois'
  top: 'labels'
  top: 'bbox_targets'
  top: 'bbox_inside_weights'
  top: 'bbox_outside_weights'
  top: 'mask_targets'
  python_param {
    module: 'rpn.proposal_target_layer'
    layer: 'ProposalTargetLayer'
    param_str: "'num_classes': 81"
  }
}
#========= RCNN ============

#layer {
#  name: "roi_pool5"
#  type: "ROIPooling"
#  bottom: "conv5"
#  bottom: "rois"
#  top: "pool5"
#  roi_pooling_param {
#    pooled_w: 6
#    pooled_h: 6
#    spatial_scale: 0.0625 # 1/16
#  }
#}

layer {
	bottom: "conv5"
	bottom: "rois"
	top: "align"
	name: "align"
	type: "ROIAlign"
	roi_pooling_param {
		pooled_w: 7
		pooled_h: 7
		#spatial_scale: 0.0312  # (1/32)
		spatial_scale: 0.0625
	}
}

layer {
  name: "fc6new"
  type: "InnerProduct"
  bottom: "align"
  top: "fc6"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 1024
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "cls_score"
  type: "InnerProduct"
  bottom: "fc7"
  top: "cls_score"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 81
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bbox_pred"
  type: "InnerProduct"
  bottom: "fc7"
  top: "bbox_pred"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 324
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "cls_score"
  bottom: "labels"
  propagate_down: 1
  propagate_down: 0
  top: "loss_cls"
  loss_weight: 1
}
layer {
  name: "loss_bbox"
  type: "SmoothL1Loss"
  bottom: "bbox_pred"
  bottom: "bbox_targets"
  bottom: "bbox_inside_weights"
  bottom: "bbox_outside_weights"
  top: "loss_bbox"
  loss_weight: 1
}

#==============================
#---------------Mask Branch --------------------------

layer {
	bottom: "align"
	top: "conv_mask1"
	name: "conv_mask1"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 256
		pad: 1
		kernel_size: 3
	
		weight_filler {
        		type: "gaussian"
			std: 0.01
        		
      		}
      		bias_filler {
        		type: "constant" # initialize the biases to zero (0)
        		value: 0
      		}

	}
}


layer {
	bottom: "conv_mask1"
	top: "conv_mask1"
	name: "relu_conv1"
	type: "ReLU"
}




layer {
	bottom: "conv_mask1"
	top: "deconv_mask1"
	name: "deconv_mask1"
	param {
		lr_mult: 1.0
	}

	type: "Deconvolution"
	convolution_param {
		num_output: 256
		kernel_size: 2
                stride: 2
       
		weight_filler {
        		type: "gaussian"
			std: 0.01
        		
      		}
      		bias_filler {
        		type: "constant" # initialize the biases to zero (0)
        		value: 0
      		}
        }
}


layer {
	bottom: "deconv_mask1"
	top: "deconv_mask1"
	name: "relu_deconv1"
	type: "ReLU"
}


layer {
	bottom: "deconv_mask1"
	top: "conv_mask2"
	name: "conv_mask2"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 256
		pad: 1
		kernel_size: 3
	

		weight_filler {
        		type: "gaussian"
			std: 0.01
        		
      		}
      		bias_filler {
        		type: "constant" # initialize the biases to zero (0)
        		value: 0
      		}

	}
}

layer {
	bottom: "conv_mask2"
	top: "conv_mask2"
	name: "relu_conv2"
	type: "ReLU"
}



layer {
	bottom: "conv_mask2"
	top: "conv_mask3"
	name: "conv_mask3"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 256
		pad: 1
		kernel_size: 3
	

		weight_filler {
        		type: "gaussian"
			std: 0.01
        		
      		}
      		bias_filler {
        		type: "constant" # initialize the biases to zero (0)
        		value: 0
      		}

      }
}


layer {
	bottom: "conv_mask3"
	top: "conv_mask3"
	name: "relu_conv3"
	type: "ReLU"
}



layer {
	bottom: "conv_mask3"
	top: "conv_mask4"
	name: "conv_mask4"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 256
		pad: 1
		kernel_size: 3
	

		weight_filler {
        		type: "gaussian"
			std: 0.01
        		
      		}
      		bias_filler {
        		type: "constant" # initialize the biases to zero (0)
        		value: 0
      		}


        }
}


layer {
	bottom: "conv_mask4"
	top: "conv_mask4"
	name: "relu_conv4"
	type: "ReLU"
}


layer {
	bottom: "conv_mask4"
	top: "conv_mask5"
	name: "conv_mask5"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 256
		pad: 1
		kernel_size: 3
	

		weight_filler {
        		type: "gaussian"
			std: 0.01
        		
      		}
      		bias_filler {
        		type: "constant" # initialize the biases to zero (0)
        		value: 0
      		}


       }
}



layer {
	bottom: "conv_mask5"
	top: "conv_mask5"
	name: "relu_conv5"
	type: "ReLU"
}



layer {
	bottom: "conv_mask5"
	top: "deconv_mask2"
	name: "deconv_mask2"
	param {
		lr_mult: 1.0
	}

	type: "Deconvolution"
	convolution_param {
		num_output: 256
		kernel_size: 2
                stride: 2
	
		weight_filler {
        		type: "gaussian"
			std: 0.01
        		
      		}
      		bias_filler {
        		type: "constant" # initialize the biases to zero (0)
        		value: 0
      		}


       }
}



layer {
	bottom: "deconv_mask2"
	top: "deconv_mask2"
	name: "relu_deconv2"
	type: "ReLU"
}



layer {
	bottom: "deconv_mask2"
	top: "conv_mask6"
	name: "conv_mask6"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 81
		pad: 1
		kernel_size: 3
		weight_filler {
        		type: "gaussian"
			std: 0.01
      		}
      		bias_filler {
        		type: "constant" # initialize the biases to zero (0)
        		value: 0
      		}
     }
}


#---------------Mask Loss --------------------------

layer {

	name: "loss_mask"
	type: "SigmoidCrossEntropyLoss"
	bottom: "conv_mask6"
	bottom: "mask_targets"
	top: "loss_mask"
  	propagate_down: 1
  	propagate_down: 0
	loss_weight: 1
        loss_param {
          ignore_label: -1
	  normalization:1
	}
}

